name: Ecommerce CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Test Backend
  test-backend:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password
        ports:
          - 27017:27017

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Run Backend Tests
      working-directory: ./backend
      run: |
        ./mvnw clean test
      env:
        DATABASE_URL: jdbc:postgresql://localhost:5432/test_db
        DATABASE_USERNAME: postgres
        DATABASE_PASSWORD: password
        MONGODB_URI: mongodb://admin:password@localhost:27017/test_products?authSource=admin
        REDIS_HOST: localhost
        REDIS_PORT: 6379

    - name: Generate Test Report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Backend Tests
        path: backend/target/surefire-reports/*.xml
        reporter: java-junit

  # Test Frontend
  test-frontend:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install Frontend Dependencies
      working-directory: ./frontend
      run: |
        npm ci
        # Install terser for Vite production builds
        npm install --save-dev terser

    - name: TypeScript Check
      working-directory: ./frontend
      run: npx tsc --noEmit

    - name: Run Frontend Linting
      working-directory: ./frontend
      run: npm run lint

    - name: Run Frontend Tests
      working-directory: ./frontend
      run: npm run test:coverage

    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  # Build and Push Docker Images
  build-and-push:
    needs: [test-backend, test-frontend, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    strategy:
      matrix:
        component: [backend, frontend]
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.component }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./${{ matrix.component }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Integration Tests
  integration-tests:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4

    - name: Create test environment file
      run: |
        cat > .env.test << EOF
        REACT_APP_CLERK_PUBLISHABLE_KEY=${{ secrets.REACT_APP_CLERK_PUBLISHABLE_KEY }}
        EOF

    - name: Create test environment
      run: |
        # Create a test-specific docker-compose override
        cat > docker-compose.test.yml << EOF
        version: '3.8'
        services:
          backend:
            environment:
              SPRING_PROFILES_ACTIVE: test
              JWT_SECRET: testSecretKeyThatIsAtLeast256BitsLongForHS512Algorithm
          frontend:
            environment:
              REACT_APP_API_URL: http://backend:8080/api
        EOF

    - name: Run Integration Tests
      run: |
        # Start the full stack with test overrides
        docker compose -f docker-compose.yml -f docker-compose.test.yml up -d
        
        # Wait for all services to be healthy
        echo "Waiting for services to be healthy..."
        timeout 300 bash -c '
          while true; do
            if docker compose ps --format json | jq -r ".[].Health" | grep -v "healthy" | grep -q "starting\|unhealthy"; then
              echo "Waiting for services..."
              sleep 10
            else
              echo "All services are healthy!"
              break
            fi
          done
        '
        
        # Run integration tests
        docker compose exec -T backend ./mvnw test -Dtest=**/*IntegrationTest
        
        # Test API endpoints
        curl -f http://localhost:8080/actuator/health || exit 1
        curl -f http://localhost:3000 || exit 1
        
        # Cleanup
        docker compose down -v

  # Deploy to Vercel
  deploy-vercel:
    needs: [test-frontend, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install Dependencies with Terser
      working-directory: ./frontend
      run: |
        npm ci
        npm install --save-dev terser
        npx update-browserslist-db

    - name: Build for Vercel
      working-directory: ./frontend
      run: npm run build
      env:
        REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL }}
        REACT_APP_CLERK_PUBLISHABLE_KEY: ${{ secrets.REACT_APP_CLERK_PUBLISHABLE_KEY }}

    - name: Deploy to Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./frontend
        vercel-args: '--prod'

  # Deploy Backend to Railway/Render/etc
  deploy-backend:
    needs: integration-tests
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4

    - name: Deploy to Staging Server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USERNAME }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        script: |
          cd /opt/ecommerce-app
          git pull origin main
          
          # Create production environment file
          cat > .env << EOF
          REACT_APP_CLERK_PUBLISHABLE_KEY=${{ secrets.REACT_APP_CLERK_PUBLISHABLE_KEY }}
          EOF
          
          # Deploy with your docker-compose.yml
          docker compose down
          docker compose pull
          docker compose up -d
          
          # Wait for health checks to pass
          echo "Waiting for application to be healthy..."
          timeout 180 bash -c '
            while ! curl -f http://localhost:8080/actuator/health > /dev/null 2>&1; do
              echo "Waiting for backend..."
              sleep 10
            done
            while ! curl -f http://localhost:3000 > /dev/null 2>&1; do
              echo "Waiting for frontend..."
              sleep 10
            done
            echo "Application is healthy!"
          '

  # Deploy to Production
  deploy-production:
    needs: deploy-staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4

    - name: Deploy to Production
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USERNAME }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        script: |
          cd /opt/ecommerce-app
          git pull origin main
          
          # Create production environment file
          cat > .env << EOF
          REACT_APP_CLERK_PUBLISHABLE_KEY=${{ secrets.REACT_APP_CLERK_PUBLISHABLE_KEY }}
          EOF
          
          # Zero-downtime deployment using your services
          echo "Starting zero-downtime deployment..."
          
          # Update backend first
          docker compose pull backend
          docker compose up -d --no-deps backend
          
          # Wait for backend health
          timeout 120 bash -c 'until curl -f http://localhost:8080/actuator/health; do sleep 5; done'
          
          # Update frontend
          docker compose pull frontend  
          docker compose up -d --no-deps frontend
          
          # Update nginx if present
          if docker compose ps nginx | grep -q "Up"; then
            docker compose up -d --no-deps nginx
          fi
          
          # Final health check
          timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 5; done'
          echo "Deployment completed successfully!"

    - name: Notify Deployment Success
      uses: 8398a7/action-slack@v3
      if: success()
      with:
        status: success
        text: "🚀 Production deployment successful!"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Notify Deployment Failure
      uses: 8398a7/action-slack@v3
      if: failure()
      with:
        status: failure
        text: "❌ Production deployment failed!"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}